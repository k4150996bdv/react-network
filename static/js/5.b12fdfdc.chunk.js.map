{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength5","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mHCG9KC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,S,mCCQRE,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCGvBC,EANC,SAACT,GACb,OACI,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,U,0CCFtCC,EAAaC,YAAiB,GAiBnBC,EAFUC,YAAU,CAAEC,KAAM,oBAAlBD,EAXL,SAACd,GACjB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAAEC,IAAWX,GAAcH,KAAK,iBAAiBe,YAAY,wBAEvG,4CCqBGC,EA7BC,SAACxB,GAEb,IAAIJ,EAAQI,EAAMyB,YAEdC,EAAkB9B,EAAM+B,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAEpF6B,EAAmBnC,EAAMoC,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,QAMnF,OAAIF,EAAMH,OAGN,yBAAKM,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAE8B,cACbR,GAEL,yBAAKvB,UAAWC,IAAE4B,UACd,iCAAOD,EAAP,KACA,6BACI,kBAAC,EAAD,CAAkBf,SAdd,SAACmB,GACjBnC,EAAMoC,YAAYD,EAAOE,sBAGJ,kBAAC,IAAD,CAAU9B,GAAI,YCD5B+B,sBAAQC,aAXD,SAAC3C,GAAD,MAAY,CAAE6B,YAAa7B,EAAM6B,gBAE9B,SAACe,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,ULJR,SAACK,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAK5C,MAAMH,OAET,kBAAC6C,EAAcE,KAAK5C,OAFI,kBAAC,IAAD,CAAUO,GAAG,eAHT,GACXsC,IAAMH,WAStC,OADoCH,YAAQ5C,EAAR4C,CAAoCI,KKC7DL,CAAwEd","file":"static/js/5.b12fdfdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1zKtq\",\"dialogsItems\":\"Dialogs_dialogsItems__grsFo\",\"active\":\"Dialogs_active__1t2Pw\",\"messages\":\"Dialogs_messages__gXzkt\",\"message\":\"Dialogs_message__3cR9b\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConectedAuthRedirectComponent\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm, reset} from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\n\r\nlet maxLength5 = maxLengthCreator(5)\r\nconst afterSubmit = (result, dispatch) =>\r\n  dispatch(reset('ordersTradesSearchForm'));\r\n\r\nconst DialogsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[ required , maxLength5 ]} name=\"newMessageBody\" placeholder=\"Enter your message\" ></Field>\r\n            </div>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({ form: \"dialogsReduxForm\" })(DialogsForm)\r\n\r\nexport default DialogsReduxForm;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router';\r\nimport DialogsReduxForm from './DialogsForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if(!props.isAuth) return <Redirect to={\"/login\"} />;\r\n    \r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements} </div>\r\n                <div>\r\n                    <DialogsReduxForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { sendMessageCreator} from '../../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => ({ dialogsPage: state.dialogsPage })\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);"],"sourceRoot":""}